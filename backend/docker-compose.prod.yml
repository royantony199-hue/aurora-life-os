version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aurora-postgres
    environment:
      POSTGRES_DB: aurora_life_os
      POSTGRES_USER: aurora_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aurora_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aurora_user -d aurora_life_os"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Rate Limiting
  redis:
    image: redis:7-alpine
    container_name: aurora-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Aurora Life OS Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: aurora-backend
    environment:
      # Database
      DATABASE_URL: postgresql://aurora_user:${POSTGRES_PASSWORD:-aurora_password}@postgres:5432/aurora_life_os
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      
      # Application
      ENVIRONMENT: production
      DEBUG: false
      
      # Security (Override these in production!)
      SECRET_KEY: ${SECRET_KEY}
      REFRESH_SECRET_KEY: ${REFRESH_SECRET_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # External APIs
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS}
    volumes:
      - ./credentials.json:/app/credentials.json:ro
      - ./logs:/app/logs
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: aurora-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: aurora-network