# Production Docker Compose for Aurora Life OS
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aurora_postgres_prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aurora_db}
      POSTGRES_USER: ${POSTGRES_USER:-aurora_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-local=trust --auth-host=md5"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aurora_user} -d ${POSTGRES_DB:-aurora_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - aurora_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aurora_redis_prod
    restart: always
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD:-}"
    volumes:
      - redis_prod_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - aurora_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: aurora_backend_prod
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Application
      APP_NAME: "Aurora Life OS"
      VERSION: "1.0.0"
      ENVIRONMENT: "production"
      DEBUG: "false"
      
      # Database
      DATABASE_URL: "postgresql://${POSTGRES_USER:-aurora_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-aurora_db}"
      DATABASE_POOL_SIZE: 20
      DATABASE_MAX_OVERFLOW: 40
      
      # Security
      SECRET_KEY: "${SECRET_KEY}"
      REFRESH_SECRET_KEY: "${REFRESH_SECRET_KEY}"
      ENCRYPTION_KEY: "${ENCRYPTION_KEY}"
      
      # Redis
      REDIS_URL: "redis://redis:6379/0"
      REDIS_PASSWORD: "${REDIS_PASSWORD:-}"
      
      # CORS - Production origins only
      ALLOWED_ORIGINS: "${ALLOWED_ORIGINS}"
      ALLOWED_HOSTS: "${ALLOWED_HOSTS}"
      
      # External APIs
      OPENAI_API_KEY: "${OPENAI_API_KEY:-}"
      GOOGLE_CLIENT_ID: "${GOOGLE_CLIENT_ID:-}"
      GOOGLE_CLIENT_SECRET: "${GOOGLE_CLIENT_SECRET:-}"
      
      # Security
      FORCE_HTTPS: "true"
      
      # Logging
      LOG_LEVEL: "INFO"
      SENTRY_DSN: "${SENTRY_DSN:-}"
    volumes:
      - backend_prod_uploads:/app/uploads
      - backend_prod_logs:/app/logs
    expose:
      - "8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - aurora_network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: aurora_frontend_prod
    restart: always
    depends_on:
      - backend
    expose:
      - "80"
    networks:
      - aurora_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aurora_nginx_prod
    restart: always
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - aurora_network

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    container_name: aurora_backup
    restart: "no"
    depends_on:
      - postgres
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./database/backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: /bin/sh -c "chmod +x /backup.sh && /backup.sh"
    networks:
      - aurora_network

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  backend_prod_uploads:
    driver: local
  backend_prod_logs:
    driver: local

networks:
  aurora_network:
    driver: bridge